parse: BLOCK_BEGIN UNKNOWN_TOKEN
##
## Ends in an error in state: 68.
##
## block -> BLOCK_BEGIN . sequence BLOCK_END [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## BLOCK_BEGIN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: BLOCK_BEGIN UNKNOWN_TYPE THEN
##
## Ends in an error in state: 99.
##
## block -> BLOCK_BEGIN sequence . BLOCK_END [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## BLOCK_BEGIN sequence
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production basic_expression -> type_expression 
## In state 89, spurious reduction of production option(sequence_op) -> 
## In state 98, spurious reduction of production sequence -> basic_expression option(sequence_op) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: COMPLEMENT UNKNOWN_TOKEN
##
## Ends in an error in state: 33.
##
## type_expression -> COMPLEMENT . type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## COMPLEMENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: IF UNKNOWN_TOKEN
##
## Ends in an error in state: 66.
##
## if_expression -> IF . sequence THEN sequence elif_expressions else_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: IF UNKNOWN_TYPE EOF
##
## Ends in an error in state: 101.
##
## if_expression -> IF sequence . THEN sequence elif_expressions else_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## IF sequence
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production basic_expression -> type_expression 
## In state 89, spurious reduction of production option(sequence_op) -> 
## In state 98, spurious reduction of production sequence -> basic_expression option(sequence_op) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: IF UNKNOWN_TYPE THEN UNKNOWN_TOKEN
##
## Ends in an error in state: 102.
##
## if_expression -> IF sequence THEN . sequence elif_expressions else_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## IF sequence THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: IF UNKNOWN_TYPE THEN UNKNOWN_TYPE ELIF UNKNOWN_TOKEN
##
## Ends in an error in state: 104.
##
## elif_expressions -> ELIF . sequence THEN sequence elif_expressions [ ELSE ]
##
## The known suffix of the stack is as follows:
## ELIF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: IF UNKNOWN_TYPE THEN UNKNOWN_TYPE ELIF UNKNOWN_TYPE EOF
##
## Ends in an error in state: 105.
##
## elif_expressions -> ELIF sequence . THEN sequence elif_expressions [ ELSE ]
##
## The known suffix of the stack is as follows:
## ELIF sequence
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production basic_expression -> type_expression 
## In state 89, spurious reduction of production option(sequence_op) -> 
## In state 98, spurious reduction of production sequence -> basic_expression option(sequence_op) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: IF UNKNOWN_TYPE THEN UNKNOWN_TYPE ELIF UNKNOWN_TYPE THEN UNKNOWN_TOKEN
##
## Ends in an error in state: 106.
##
## elif_expressions -> ELIF sequence THEN . sequence elif_expressions [ ELSE ]
##
## The known suffix of the stack is as follows:
## ELIF sequence THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: IF UNKNOWN_TYPE THEN UNKNOWN_TYPE ELIF UNKNOWN_TYPE THEN UNKNOWN_TYPE THEN
##
## Ends in an error in state: 107.
##
## elif_expressions -> ELIF sequence THEN sequence . elif_expressions [ ELSE ]
##
## The known suffix of the stack is as follows:
## ELIF sequence THEN sequence
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production basic_expression -> type_expression 
## In state 89, spurious reduction of production option(sequence_op) -> 
## In state 98, spurious reduction of production sequence -> basic_expression option(sequence_op) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: IF UNKNOWN_TYPE THEN UNKNOWN_TYPE ELSE TRUE UNKNOWN_TYPE
##
## Ends in an error in state: 112.
##
## else_expression -> ELSE basic_expression . [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## function_call -> basic_expression . OPEN_PARENTHESES sequence CLOSE_PARENTHESES [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## tuple_constructor -> basic_expression . COMMA basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## ELSE basic_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: IF UNKNOWN_TYPE THEN UNKNOWN_TYPE ELSE UNKNOWN_TOKEN
##
## Ends in an error in state: 111.
##
## else_expression -> ELSE . basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: IF UNKNOWN_TYPE THEN UNKNOWN_TYPE THEN
##
## Ends in an error in state: 103.
##
## if_expression -> IF sequence THEN sequence . elif_expressions else_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## IF sequence THEN sequence
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production basic_expression -> type_expression 
## In state 89, spurious reduction of production option(sequence_op) -> 
## In state 98, spurious reduction of production sequence -> basic_expression option(sequence_op) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: INT_NUMBER FRACTION UNKNOWN_TYPE
##
## Ends in an error in state: 64.
##
## number_constructor -> INT_NUMBER FRACTION . INT_NUMBER [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## INT_NUMBER FRACTION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: INT_NUMBER MINUS INT_NUMBER UNKNOWN_TYPE
##
## Ends in an error in state: 62.
##
## number_constructor -> INT_NUMBER MINUS INT_NUMBER . I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## INT_NUMBER MINUS INT_NUMBER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: INT_NUMBER MINUS REAL_NUMBER UNKNOWN_TYPE
##
## Ends in an error in state: 60.
##
## number_constructor -> INT_NUMBER MINUS REAL_NUMBER . I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## INT_NUMBER MINUS REAL_NUMBER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: INT_NUMBER MINUS UNKNOWN_TYPE
##
## Ends in an error in state: 59.
##
## number_constructor -> INT_NUMBER MINUS . INT_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> INT_NUMBER MINUS . REAL_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## INT_NUMBER MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: INT_NUMBER PLUS INT_NUMBER UNKNOWN_TYPE
##
## Ends in an error in state: 57.
##
## number_constructor -> INT_NUMBER PLUS INT_NUMBER . I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## INT_NUMBER PLUS INT_NUMBER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: INT_NUMBER PLUS REAL_NUMBER UNKNOWN_TYPE
##
## Ends in an error in state: 55.
##
## number_constructor -> INT_NUMBER PLUS REAL_NUMBER . I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## INT_NUMBER PLUS REAL_NUMBER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: INT_NUMBER PLUS UNKNOWN_TYPE
##
## Ends in an error in state: 54.
##
## number_constructor -> INT_NUMBER PLUS . INT_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> INT_NUMBER PLUS . REAL_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## INT_NUMBER PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: INT_NUMBER UNKNOWN_TYPE
##
## Ends in an error in state: 53.
##
## number_constructor -> INT_NUMBER . [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> INT_NUMBER . FRACTION INT_NUMBER [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> INT_NUMBER . PLUS INT_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> INT_NUMBER . MINUS INT_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> INT_NUMBER . PLUS REAL_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> INT_NUMBER . MINUS REAL_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## INT_NUMBER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LAMBDA NAME COLON UNKNOWN_TOKEN
##
## Ends in an error in state: 115.
##
## lambda -> LAMBDA NAME COLON . type_expression POINT basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## LAMBDA NAME COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LAMBDA NAME COLON UNKNOWN_TYPE POINT TRUE UNKNOWN_TYPE
##
## Ends in an error in state: 118.
##
## function_call -> basic_expression . OPEN_PARENTHESES sequence CLOSE_PARENTHESES [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## lambda -> LAMBDA NAME COLON type_expression POINT basic_expression . [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## tuple_constructor -> basic_expression . COMMA basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## LAMBDA NAME COLON type_expression POINT basic_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LAMBDA NAME COLON UNKNOWN_TYPE POINT UNKNOWN_TOKEN
##
## Ends in an error in state: 117.
##
## lambda -> LAMBDA NAME COLON type_expression POINT . basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## LAMBDA NAME COLON type_expression POINT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LAMBDA NAME COLON UNKNOWN_TYPE UNKNOWN_TYPE
##
## Ends in an error in state: 116.
##
## lambda -> LAMBDA NAME COLON type_expression . POINT basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## type_expression -> type_expression . UNION type_expression [ UNION POINT INTERSECTION COMMA ARROW ]
## type_expression -> type_expression . INTERSECTION type_expression [ UNION POINT INTERSECTION COMMA ARROW ]
## type_expression -> type_expression . COMMA type_expression [ UNION POINT INTERSECTION COMMA ARROW ]
## type_expression -> type_expression . ARROW type_expression [ UNION POINT INTERSECTION COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LAMBDA NAME COLON type_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LAMBDA NAME POINT TRUE UNKNOWN_TYPE
##
## Ends in an error in state: 114.
##
## function_call -> basic_expression . OPEN_PARENTHESES sequence CLOSE_PARENTHESES [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## lambda -> LAMBDA NAME POINT basic_expression . [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## tuple_constructor -> basic_expression . COMMA basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## LAMBDA NAME POINT basic_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LAMBDA NAME POINT UNKNOWN_TOKEN
##
## Ends in an error in state: 52.
##
## lambda -> LAMBDA NAME POINT . basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## LAMBDA NAME POINT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LAMBDA NAME UNKNOWN_TYPE
##
## Ends in an error in state: 51.
##
## lambda -> LAMBDA NAME . COLON type_expression POINT basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## lambda -> LAMBDA NAME . POINT basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## LAMBDA NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LAMBDA UNKNOWN_TYPE
##
## Ends in an error in state: 50.
##
## lambda -> LAMBDA . NAME COLON type_expression POINT basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## lambda -> LAMBDA . NAME POINT basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## LAMBDA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LIST_TYPE OPEN_BRACKET UNKNOWN_TOKEN
##
## Ends in an error in state: 31.
##
## type_expression -> LIST_TYPE OPEN_BRACKET . type_expression CLOSE_BRACKET [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## LIST_TYPE OPEN_BRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LIST_TYPE OPEN_BRACKET UNKNOWN_TYPE UNKNOWN_TYPE
##
## Ends in an error in state: 36.
##
## type_expression -> type_expression . UNION type_expression [ UNION INTERSECTION COMMA CLOSE_BRACKET ARROW ]
## type_expression -> type_expression . INTERSECTION type_expression [ UNION INTERSECTION COMMA CLOSE_BRACKET ARROW ]
## type_expression -> type_expression . COMMA type_expression [ UNION INTERSECTION COMMA CLOSE_BRACKET ARROW ]
## type_expression -> LIST_TYPE OPEN_BRACKET type_expression . CLOSE_BRACKET [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . ARROW type_expression [ UNION INTERSECTION COMMA CLOSE_BRACKET ARROW ]
##
## The known suffix of the stack is as follows:
## LIST_TYPE OPEN_BRACKET type_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LIST_TYPE UNKNOWN_TYPE
##
## Ends in an error in state: 30.
##
## type_expression -> LIST_TYPE . [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> LIST_TYPE . OPEN_BRACKET type_expression CLOSE_BRACKET [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## LIST_TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: MATRIX_TYPE OPEN_BRACKET UNKNOWN_TOKEN
##
## Ends in an error in state: 29.
##
## type_expression -> MATRIX_TYPE OPEN_BRACKET . type_expression CLOSE_BRACKET [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## MATRIX_TYPE OPEN_BRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: MATRIX_TYPE OPEN_BRACKET UNKNOWN_TYPE UNKNOWN_TYPE
##
## Ends in an error in state: 46.
##
## type_expression -> type_expression . UNION type_expression [ UNION INTERSECTION COMMA CLOSE_BRACKET ARROW ]
## type_expression -> type_expression . INTERSECTION type_expression [ UNION INTERSECTION COMMA CLOSE_BRACKET ARROW ]
## type_expression -> type_expression . COMMA type_expression [ UNION INTERSECTION COMMA CLOSE_BRACKET ARROW ]
## type_expression -> MATRIX_TYPE OPEN_BRACKET type_expression . CLOSE_BRACKET [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . ARROW type_expression [ UNION INTERSECTION COMMA CLOSE_BRACKET ARROW ]
##
## The known suffix of the stack is as follows:
## MATRIX_TYPE OPEN_BRACKET type_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: MATRIX_TYPE UNKNOWN_TYPE
##
## Ends in an error in state: 28.
##
## type_expression -> MATRIX_TYPE . [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> MATRIX_TYPE . OPEN_BRACKET type_expression CLOSE_BRACKET [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## MATRIX_TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: NAME ASSIGN TRUE UNKNOWN_TYPE
##
## Ends in an error in state: 119.
##
## assignment -> NAME ASSIGN basic_expression . [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## function_call -> basic_expression . OPEN_PARENTHESES sequence CLOSE_PARENTHESES [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## tuple_constructor -> basic_expression . COMMA basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## NAME ASSIGN basic_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: NAME ASSIGN UNKNOWN_TOKEN
##
## Ends in an error in state: 49.
##
## assignment -> NAME ASSIGN . basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## NAME ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: NAME COLON UNKNOWN_TOKEN
##
## Ends in an error in state: 27.
##
## declaration -> NAME COLON . type_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## NAME COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: NAME COLON UNKNOWN_TYPE UNKNOWN_TYPE
##
## Ends in an error in state: 48.
##
## declaration -> NAME COLON type_expression . [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## type_expression -> type_expression . UNION type_expression [ UNION THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . INTERSECTION type_expression [ UNION THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . COMMA type_expression [ UNION THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . ARROW type_expression [ UNION THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## NAME COLON type_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: NAME UNKNOWN_TYPE
##
## Ends in an error in state: 26.
##
## assignment -> NAME . ASSIGN basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## declaration -> NAME . COLON type_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## variable -> NAME . [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: NEWLINE ASSIGN
##
## Ends in an error in state: 3.
##
## parse -> option(NEWLINE) . sequence EOF [ # ]
##
## The known suffix of the stack is as follows:
## option(NEWLINE)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: OPEN_BRACKET UNKNOWN_TOKEN
##
## Ends in an error in state: 25.
##
## matrix_constructor -> OPEN_BRACKET . matrix_elements CLOSE_BRACKET [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## matrix_constructor -> OPEN_BRACKET . CLOSE_BRACKET [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## OPEN_BRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: OPEN_BRACKET UNKNOWN_TYPE CLOSE_LIST
##
## Ends in an error in state: 123.
##
## matrix_elements -> element_list . MATRIX_SEPARATOR option(MATRIX_SEPARATOR) matrix_elements [ CLOSE_BRACKET ]
## matrix_elements -> element_list . [ CLOSE_BRACKET ]
##
## The known suffix of the stack is as follows:
## element_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production basic_expression -> type_expression 
## In state 128, spurious reduction of production element_list -> basic_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: OPEN_BRACKET UNKNOWN_TYPE MATRIX_SEPARATOR MATRIX_SEPARATOR ASSIGN
##
## Ends in an error in state: 126.
##
## matrix_elements -> element_list MATRIX_SEPARATOR option(MATRIX_SEPARATOR) . matrix_elements [ CLOSE_BRACKET ]
##
## The known suffix of the stack is as follows:
## element_list MATRIX_SEPARATOR option(MATRIX_SEPARATOR)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: OPEN_BRACKET UNKNOWN_TYPE MATRIX_SEPARATOR UNKNOWN_TOKEN
##
## Ends in an error in state: 124.
##
## matrix_elements -> element_list MATRIX_SEPARATOR . option(MATRIX_SEPARATOR) matrix_elements [ CLOSE_BRACKET ]
##
## The known suffix of the stack is as follows:
## element_list MATRIX_SEPARATOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: OPEN_LIST UNKNOWN_TOKEN
##
## Ends in an error in state: 24.
##
## list_constructor -> OPEN_LIST . element_list CLOSE_LIST [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## list_constructor -> OPEN_LIST . CLOSE_LIST [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## OPEN_LIST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: OPEN_LIST UNKNOWN_TYPE MATRIX_SEPARATOR
##
## Ends in an error in state: 132.
##
## list_constructor -> OPEN_LIST element_list . CLOSE_LIST [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## OPEN_LIST element_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production basic_expression -> type_expression 
## In state 128, spurious reduction of production element_list -> basic_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: OPEN_LIST UNKNOWN_TYPE SPACE UNKNOWN_TOKEN
##
## Ends in an error in state: 129.
##
## element_list -> basic_expression SPACE . element_list [ MATRIX_SEPARATOR CLOSE_LIST CLOSE_BRACKET ]
##
## The known suffix of the stack is as follows:
## basic_expression SPACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: OPEN_LIST UNKNOWN_TYPE THEN
##
## Ends in an error in state: 128.
##
## element_list -> basic_expression . SPACE element_list [ MATRIX_SEPARATOR CLOSE_LIST CLOSE_BRACKET ]
## element_list -> basic_expression . [ MATRIX_SEPARATOR CLOSE_LIST CLOSE_BRACKET ]
## function_call -> basic_expression . OPEN_PARENTHESES sequence CLOSE_PARENTHESES [ SPACE OPEN_PARENTHESES MATRIX_SEPARATOR COMMA CLOSE_LIST CLOSE_BRACKET ]
## tuple_constructor -> basic_expression . COMMA basic_expression [ SPACE OPEN_PARENTHESES MATRIX_SEPARATOR COMMA CLOSE_LIST CLOSE_BRACKET ]
##
## The known suffix of the stack is as follows:
## basic_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production basic_expression -> type_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: OPEN_PARENTHESES UNKNOWN_TOKEN
##
## Ends in an error in state: 23.
##
## basic_expression -> OPEN_PARENTHESES . sequence CLOSE_PARENTHESES [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## OPEN_PARENTHESES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: OPEN_PARENTHESES UNKNOWN_TYPE THEN
##
## Ends in an error in state: 134.
##
## basic_expression -> OPEN_PARENTHESES sequence . CLOSE_PARENTHESES [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## OPEN_PARENTHESES sequence
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production basic_expression -> type_expression 
## In state 89, spurious reduction of production option(sequence_op) -> 
## In state 98, spurious reduction of production sequence -> basic_expression option(sequence_op) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: REAL_NUMBER MINUS INT_NUMBER UNKNOWN_TYPE
##
## Ends in an error in state: 20.
##
## number_constructor -> REAL_NUMBER MINUS INT_NUMBER . I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## REAL_NUMBER MINUS INT_NUMBER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: REAL_NUMBER MINUS REAL_NUMBER UNKNOWN_TYPE
##
## Ends in an error in state: 18.
##
## number_constructor -> REAL_NUMBER MINUS REAL_NUMBER . I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## REAL_NUMBER MINUS REAL_NUMBER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: REAL_NUMBER MINUS UNKNOWN_TYPE
##
## Ends in an error in state: 17.
##
## number_constructor -> REAL_NUMBER MINUS . INT_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> REAL_NUMBER MINUS . REAL_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## REAL_NUMBER MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: REAL_NUMBER PLUS INT_NUMBER UNKNOWN_TYPE
##
## Ends in an error in state: 15.
##
## number_constructor -> REAL_NUMBER PLUS INT_NUMBER . I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## REAL_NUMBER PLUS INT_NUMBER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: REAL_NUMBER PLUS REAL_NUMBER UNKNOWN_TYPE
##
## Ends in an error in state: 13.
##
## number_constructor -> REAL_NUMBER PLUS REAL_NUMBER . I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## REAL_NUMBER PLUS REAL_NUMBER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: REAL_NUMBER PLUS UNKNOWN_TYPE
##
## Ends in an error in state: 12.
##
## number_constructor -> REAL_NUMBER PLUS . INT_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> REAL_NUMBER PLUS . REAL_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## REAL_NUMBER PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: REAL_NUMBER UNKNOWN_TYPE
##
## Ends in an error in state: 11.
##
## number_constructor -> REAL_NUMBER . [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> REAL_NUMBER . I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> REAL_NUMBER . PLUS INT_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> REAL_NUMBER . MINUS INT_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> REAL_NUMBER . PLUS REAL_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## number_constructor -> REAL_NUMBER . MINUS REAL_NUMBER I [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## REAL_NUMBER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: TRUE COMMA ATOM COMMA TRUE UNKNOWN_TYPE
##
## Ends in an error in state: 85.
##
## function_call -> basic_expression . OPEN_PARENTHESES sequence CLOSE_PARENTHESES [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## tuple_constructor -> tuple_constructor COMMA basic_expression . [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## tuple_constructor -> basic_expression . COMMA basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## tuple_constructor COMMA basic_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: TRUE COMMA ATOM COMMA UNKNOWN_TOKEN
##
## Ends in an error in state: 74.
##
## tuple_constructor -> tuple_constructor COMMA . basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## tuple_constructor COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: TRUE COMMA TRUE UNKNOWN_TYPE
##
## Ends in an error in state: 97.
##
## function_call -> basic_expression . OPEN_PARENTHESES sequence CLOSE_PARENTHESES [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## tuple_constructor -> basic_expression . COMMA basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## tuple_constructor -> basic_expression COMMA basic_expression . [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## basic_expression COMMA basic_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: TRUE COMMA UNKNOWN_TOKEN
##
## Ends in an error in state: 96.
##
## tuple_constructor -> basic_expression COMMA . basic_expression [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## basic_expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TOKEN
##
## Ends in an error in state: 0.
##
## parse' -> . parse [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE ARROW UNKNOWN_TOKEN
##
## Ends in an error in state: 41.
##
## type_expression -> type_expression ARROW . type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## type_expression ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE ARROW UNKNOWN_TYPE UNKNOWN_TYPE
##
## Ends in an error in state: 42.
##
## type_expression -> type_expression . UNION type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . INTERSECTION type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . COMMA type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . ARROW type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression ARROW type_expression . [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## type_expression ARROW type_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE COMMA UNKNOWN_TOKEN
##
## Ends in an error in state: 43.
##
## type_expression -> type_expression COMMA . type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## type_expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE INTERSECTION UNKNOWN_TOKEN
##
## Ends in an error in state: 39.
##
## type_expression -> type_expression INTERSECTION . type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## type_expression INTERSECTION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE INTERSECTION UNKNOWN_TYPE UNKNOWN_TYPE
##
## Ends in an error in state: 40.
##
## type_expression -> type_expression . UNION type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . INTERSECTION type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression INTERSECTION type_expression . [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . COMMA type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . ARROW type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## type_expression INTERSECTION type_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE NEWLINE UNKNOWN_TOKEN
##
## Ends in an error in state: 94.
##
## option(sequence_op) -> NEWLINE . [ THEN EOF ELSE ELIF CLOSE_PARENTHESES BLOCK_END ]
## sequence -> basic_expression NEWLINE . sequence [ THEN EOF ELSE ELIF CLOSE_PARENTHESES BLOCK_END ]
##
## The known suffix of the stack is as follows:
## basic_expression NEWLINE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE OPEN_PARENTHESES UNKNOWN_TOKEN
##
## Ends in an error in state: 86.
##
## function_call -> basic_expression OPEN_PARENTHESES . sequence CLOSE_PARENTHESES [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## basic_expression OPEN_PARENTHESES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE OPEN_PARENTHESES UNKNOWN_TYPE THEN
##
## Ends in an error in state: 87.
##
## function_call -> basic_expression OPEN_PARENTHESES sequence . CLOSE_PARENTHESES [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
##
## The known suffix of the stack is as follows:
## basic_expression OPEN_PARENTHESES sequence
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production basic_expression -> type_expression 
## In state 89, spurious reduction of production option(sequence_op) -> 
## In state 98, spurious reduction of production sequence -> basic_expression option(sequence_op) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE SEQUENCE UNKNOWN_TOKEN
##
## Ends in an error in state: 90.
##
## option(sequence_op) -> SEQUENCE . [ THEN EOF ELSE ELIF CLOSE_PARENTHESES BLOCK_END ]
## sequence -> basic_expression SEQUENCE . sequence [ THEN EOF ELSE ELIF CLOSE_PARENTHESES BLOCK_END ]
##
## The known suffix of the stack is as follows:
## basic_expression SEQUENCE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE SPACE
##
## Ends in an error in state: 89.
##
## function_call -> basic_expression . OPEN_PARENTHESES sequence CLOSE_PARENTHESES [ THEN SEQUENCE OPEN_PARENTHESES NEWLINE EOF ELSE ELIF COMMA CLOSE_PARENTHESES BLOCK_END ]
## sequence -> basic_expression . SEQUENCE sequence [ THEN EOF ELSE ELIF CLOSE_PARENTHESES BLOCK_END ]
## sequence -> basic_expression . NEWLINE sequence [ THEN EOF ELSE ELIF CLOSE_PARENTHESES BLOCK_END ]
## sequence -> basic_expression . option(sequence_op) [ THEN EOF ELSE ELIF CLOSE_PARENTHESES BLOCK_END ]
## tuple_constructor -> basic_expression . COMMA basic_expression [ THEN SEQUENCE OPEN_PARENTHESES NEWLINE EOF ELSE ELIF COMMA CLOSE_PARENTHESES BLOCK_END ]
##
## The known suffix of the stack is as follows:
## basic_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production basic_expression -> type_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE THEN
##
## Ends in an error in state: 136.
##
## parse -> option(NEWLINE) sequence . EOF [ # ]
##
## The known suffix of the stack is as follows:
## option(NEWLINE) sequence
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production basic_expression -> type_expression 
## In state 89, spurious reduction of production option(sequence_op) -> 
## In state 98, spurious reduction of production sequence -> basic_expression option(sequence_op) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE UNION UNKNOWN_TOKEN
##
## Ends in an error in state: 37.
##
## type_expression -> type_expression UNION . type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## type_expression UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE UNION UNKNOWN_TYPE UNKNOWN_TYPE
##
## Ends in an error in state: 38.
##
## type_expression -> type_expression . UNION type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression UNION type_expression . [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . INTERSECTION type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . COMMA type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . ARROW type_expression [ UNION THEN SPACE SEQUENCE POINT OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## type_expression UNION type_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: UNKNOWN_TYPE UNKNOWN_TYPE
##
## Ends in an error in state: 71.
##
## basic_expression -> type_expression . [ THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ]
## type_expression -> type_expression . UNION type_expression [ UNION THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . INTERSECTION type_expression [ UNION THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . COMMA type_expression [ UNION THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
## type_expression -> type_expression . ARROW type_expression [ UNION THEN SPACE SEQUENCE OPEN_PARENTHESES NEWLINE MATRIX_SEPARATOR INTERSECTION EOF ELSE ELIF COMMA CLOSE_PARENTHESES CLOSE_LIST CLOSE_BRACKET BLOCK_END ARROW ]
##
## The known suffix of the stack is as follows:
## type_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

